{{- if .Values.qbittorrent.enabled }}
{{- include "mediastack.configPVC" (dict "service" "qbittorrent" "context" .) }}
---
{{- if .Values.qbittorrent.vpn.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: qbittorrent-vpn-secret
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: qbittorrent-vpn
type: Opaque
stringData:
  WIREGUARD_PRIVATE_KEY: {{ .Values.qbittorrent.vpn.wireguard.privateKey | quote }}
  {{- if .Values.qbittorrent.vpn.wireguard.presharedKey }}
  WIREGUARD_PRESHARED_KEY: {{ .Values.qbittorrent.vpn.wireguard.presharedKey | quote }}
  {{- end }}
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: qbittorrent
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: qbittorrent
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qbittorrent
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: qbittorrent
      {{- if .Values.qbittorrent.vpn.enabled }}
      annotations:
        # Force pod restart when VPN config changes
        checksum/vpn-config: {{ .Values.qbittorrent.vpn | toYaml | sha256sum }}
      {{- end }}
    spec:
      {{- if .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ .Values.nodeAffinity.hostname }}
      {{- end }}
      containers:
        {{- if .Values.qbittorrent.vpn.enabled }}
        # Gluetun VPN sidecar container
        - name: gluetun
          image: ghcr.io/qdm12/gluetun:latest
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "(ip rule del table 51820; ip -6 rule del table 51820) || true"]
          ports:
            - name: http
              containerPort: {{ .Values.qbittorrent.service.port }}
              protocol: TCP
            - name: torrent
              containerPort: {{ .Values.qbittorrent.service.torrentPort }}
              protocol: TCP
            - name: torrent-udp
              containerPort: {{ .Values.qbittorrent.service.torrentPort }}
              protocol: UDP
            - name: control
              containerPort: 8000
              protocol: TCP
            - name: proxy-http
              containerPort: 8888
              protocol: TCP
            - name: proxy-socks
              containerPort: 8388
              protocol: TCP
          env:
            - name: VPN_SERVICE_PROVIDER
              value: {{ .Values.qbittorrent.vpn.provider | quote }}
            - name: VPN_TYPE
              value: "wireguard"
            {{- if .Values.qbittorrent.vpn.wireguard.addresses }}
            - name: WIREGUARD_ADDRESSES
              value: {{ .Values.qbittorrent.vpn.wireguard.addresses | quote }}
            {{- end }}
            - name: WIREGUARD_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: qbittorrent-vpn-secret
                  key: WIREGUARD_PRIVATE_KEY
            {{- if .Values.qbittorrent.vpn.wireguard.presharedKey }}
            - name: WIREGUARD_PRESHARED_KEY
              valueFrom:
                secretKeyRef:
                  name: qbittorrent-vpn-secret
                  key: WIREGUARD_PRESHARED_KEY
            {{- end }}
            {{- if .Values.qbittorrent.vpn.wireguard.publicKey }}
            - name: WIREGUARD_PUBLIC_KEY
              value: {{ .Values.qbittorrent.vpn.wireguard.publicKey | quote }}
            {{- end }}
            {{- if and .Values.qbittorrent.vpn.wireguard.endpoint .Values.qbittorrent.vpn.wireguard.endpoint.ip }}
            - name: WIREGUARD_ENDPOINT_IP
              value: {{ .Values.qbittorrent.vpn.wireguard.endpoint.ip | quote }}
            - name: WIREGUARD_ENDPOINT_PORT
              value: {{ .Values.qbittorrent.vpn.wireguard.endpoint.port | quote }}
            {{- end }}
            {{- if .Values.qbittorrent.vpn.serverCities }}
            - name: SERVER_CITIES
              value: {{ .Values.qbittorrent.vpn.serverCities | quote }}
            {{- end }}
            {{- if .Values.qbittorrent.vpn.serverCountries }}
            - name: SERVER_COUNTRIES
              value: {{ .Values.qbittorrent.vpn.serverCountries | quote }}
            {{- end }}
            - name: FIREWALL_DEBUG
              value: "on"
            - name: FIREWALL_INPUT_PORTS
              value: "1000,8000,{{ .Values.qbittorrent.service.port }}"
            - name: FIREWALL_OUTBOUND_SUBNETS
              value: {{ .Values.qbittorrent.vpn.allowedSubnets | default "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" | quote }}
            - name: FIREWALL_VPN_INPUT_PORTS
              value: {{ .Values.qbittorrent.service.torrentPort | quote }}
            # Force IPv6 disable to avoid routing issues
            - name: DISABLE_IPV6
              value: "yes"
            - name: FIREWALL_DEBUG
              value: "on"
            - name: FIREWALL_INPUT_PORTS
              value: "1000,8000,8080"
            - name: FIREWALL_OUTBOUND_SUBNETS
              value: {{ .Values.qbittorrent.vpn.allowedSubnets | default "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" | quote }}
            - name: FIREWALL_VPN_INPUT_PORTS
              value: {{ .Values.qbittorrent.service.torrentPort | quote }}
            - name: HEALTH_VPN_DURATION_INITIAL
              value: "60s"
            - name: HEALTH_TARGET_ADDRESS
              value: "1.1.1.1:443"
            - name: HTTP_CONTROL_SERVER_ADDRESS
              value: ":8000"
            - name: DOT
              value: "on"
            - name: DOT_PROVIDERS
              value: "cloudflare"
            - name: DOT_VERBOSITY
              value: "1"
            - name: DOT_VERBOSITY_DETAILS
              value: "0"
            - name: BLOCK_MALICIOUS
              value: "off"
            - name: BLOCK_SURVEILLANCE
              value: "off"
            - name: HTTPPROXY
              value: "on"
            - name: HTTPPROXY_LISTENING_ADDRESS
              value: ":8888"
            # Enable Shadowsocks proxy as backup
            - name: SHADOWSOCKS
              value: "on"
            - name: SHADOWSOCKS_LISTENING_ADDRESS
              value: ":8388"
            # Log level for troubleshooting
            - name: LOG_LEVEL
              value: "debug"
          volumeMounts:
            - name: gluetun-data
              mountPath: /gluetun
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        {{- end }}
        # qBittorrent main container
        - name: qbittorrent
          image: "{{ .Values.qbittorrent.image.repository }}:{{ .Values.qbittorrent.image.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          {{- if not .Values.qbittorrent.vpn.enabled }}
          ports:
            - name: http
              containerPort: {{ .Values.qbittorrent.service.port }}
              protocol: TCP
            - name: torrent
              containerPort: {{ .Values.qbittorrent.service.torrentPort }}
              protocol: TCP
            - name: torrent-udp
              containerPort: {{ .Values.qbittorrent.service.torrentPort }}
              protocol: UDP
          {{- end }}
          env:
            {{- include "mediastack.commonEnv" . | nindent 12 }}
            {{- if .Values.qbittorrent.vpn.enabled }}
            # Use localhost when sharing network with VPN sidecar
            - name: NETWORK_INTERFACE
              value: "wg0"
            {{- end }}
            {{- with .Values.qbittorrent.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /data/downloads
          {{- with .Values.qbittorrent.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: qbittorrent-config-pvc
        - name: downloads
          persistentVolumeClaim:
            claimName: downloads-pvc
        {{- if .Values.qbittorrent.vpn.enabled }}
        - name: gluetun-data
          emptyDir: {}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: qbittorrent
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.qbittorrent.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.qbittorrent.service.torrentPort }}
      targetPort: torrent
      protocol: TCP
      name: torrent
    - port: {{ .Values.qbittorrent.service.torrentPort }}
      targetPort: torrent-udp
      protocol: UDP
      name: torrent-udp
  selector:
    app.kubernetes.io/name: qbittorrent
    app.kubernetes.io/instance: {{ .Release.Name }}
---
{{- if .Values.qbittorrent.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qbittorrent
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: qbittorrent
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: {{ .Values.global.traefik.entrypoint }}
    {{- if .Values.global.traefik.tls.enabled }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
    {{- $middlewares := include "mediastack.traefikMiddlewares" (dict "global" .Values.global "service" .Values.qbittorrent) }}
    {{- if $middlewares }}
    traefik.ingress.kubernetes.io/router.middlewares: {{ $middlewares }}
    {{- end }}
spec:
  ingressClassName: traefik
  {{- if .Values.global.traefik.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.qbittorrent.ingress.host }}.{{ .Values.global.domain }}
      secretName: qbittorrent-tls
  {{- end }}
  rules:
    - host: {{ .Values.qbittorrent.ingress.host }}.{{ .Values.global.domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: qbittorrent
                port:
                  number: {{ .Values.qbittorrent.service.port }}
{{- end }}
{{- end }}
