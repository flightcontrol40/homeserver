{{- if .Values.overseerr.enabled }}
{{- include "mediastack.configPVC" (dict "service" "overseerr" "context" .) }}
---
apiVersion: v1
kind: Service
metadata:
  name: overseerr
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: overseerr
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.overseerr.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overseerr
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: overseerr
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: overseerr
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: overseerr
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: overseerr
    spec:
      {{- if .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ .Values.nodeAffinity.hostname }}
      {{- end }}
      containers:
        - name: overseerr
          image: "{{ .Values.overseerr.image.repository }}:{{ .Values.overseerr.image.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.overseerr.service.port }}
              protocol: TCP
          env:
            - name: TZ
              value: {{ .Values.global.timezone }}
            - name: PUID
              value: {{ .Values.global.PUID | quote }}
            - name: PGID
              value: {{ .Values.global.PGID | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.overseerr.logLevel | default "info" }}
            {{- range .Values.overseerr.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /app/config
          livenessProbe:
            httpGet:
              path: /api/v1/status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/status
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.overseerr.resources | nindent 12 }}
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: overseerr-config-pvc
---
{{- if .Values.overseerr.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: overseerr
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: overseerr
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: {{ .Values.global.traefik.entrypoint }}
    {{- if .Values.global.traefik.tls.enabled }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
    {{- $middlewares := include "mediastack.traefikMiddlewares" (dict "global" .Values.global "service" .Values.overseerr) }}
    {{- if $middlewares }}
    traefik.ingress.kubernetes.io/router.middlewares: {{ $middlewares }}
    {{- end }}
spec:
  ingressClassName: traefik
  {{- if .Values.global.traefik.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.overseerr.ingress.host }}.{{ .Values.global.domain }}
      secretName: overseerr-tls
  {{- end }}
  rules:
    - host: {{ .Values.overseerr.ingress.host }}.{{ .Values.global.domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: overseerr
                port:
                  number: {{ .Values.overseerr.service.port }}
{{- end }}
{{- end }}
