{{- if .Values.postgresql.enabled }}
{{- include "mediastack.configPVC" (dict "service" "postgresql" "context" .) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: postgresql
    spec:
      {{- if .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ .Values.nodeAffinity.hostname }}
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.global.pgid }}
      containers:
        - name: postgresql
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.postgresql.service.port }}
              protocol: TCP
          env:
            - name: TZ
              value: {{ .Values.global.timezone | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
          {{- with .Values.postgresql.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }}
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: postgresql-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.postgresql.service.port }}
      targetPort: postgresql
      protocol: TCP
      name: postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
type: Opaque
stringData:
  postgres-password: {{ .Values.postgresql.auth.postgresPassword | quote }}
  password: {{ .Values.postgresql.auth.password | quote }}
{{- end }}
