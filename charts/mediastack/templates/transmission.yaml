{{- if .Values.transmission.enabled }}
{{- include "mediastack.configPVC" (dict "service" "transmission" "context" .) }}
---
{{- if .Values.transmission.vpn.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: transmission-vpn-secret
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission-vpn
type: Opaque
stringData:
  WIREGUARD_PRIVATE_KEY: {{ .Values.transmission.vpn.wireguard.privateKey | quote }}
  {{- if .Values.transmission.vpn.wireguard.presharedKey }}
  WIREGUARD_PRESHARED_KEY: {{ .Values.transmission.vpn.wireguard.presharedKey | quote }}
  {{- end }}
---
{{- end }}
{{- if .Values.transmission.rpcPassword.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: transmission-rpc-secret
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission
type: Opaque
stringData:
  RPC_PASSWORD: {{ .Values.transmission.rpcPassword.value | quote }}
---
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: transmission-config
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission
data:
  settings.json: |
    {
      "alt-speed-down": {{ .Values.transmission.config.altSpeedDown | default 50 }},
      "alt-speed-enabled": {{ .Values.transmission.config.altSpeedEnabled | default false }},
      "alt-speed-time-begin": {{ .Values.transmission.config.altSpeedTimeBegin | default 540 }},
      "alt-speed-time-day": {{ .Values.transmission.config.altSpeedTimeDay | default 127 }},
      "alt-speed-time-enabled": {{ .Values.transmission.config.altSpeedTimeEnabled | default false }},
      "alt-speed-time-end": {{ .Values.transmission.config.altSpeedTimeEnd | default 1020 }},
      "alt-speed-up": {{ .Values.transmission.config.altSpeedUp | default 50 }},
      "announce-ip": "",
      "announce-ip-enabled": false,
      "anti-brute-force-enabled": {{ .Values.transmission.config.antiBruteForceEnabled | default false }},
      "anti-brute-force-threshold": {{ .Values.transmission.config.antiBruteForceThreshold | default 100 }},
      "bind-address-ipv4": "0.0.0.0",
      "bind-address-ipv6": "::",
      "blocklist-enabled": {{ .Values.transmission.config.blocklistEnabled | default true }},
      "blocklist-url": "{{ .Values.transmission.config.blocklistUrl | default "https://github.com/Naunter/BT_BlockLists/raw/master/bt_blocklists.gz" }}",
      "cache-size-mb": {{ .Values.transmission.config.cacheSizeMb | default 4 }},
      "default-trackers": "",
      "dht-enabled": {{ .Values.transmission.config.dhtEnabled | default true }},
      "download-dir": "/downloads/complete",
      "download-queue-enabled": {{ .Values.transmission.config.downloadQueueEnabled | default true }},
      "download-queue-size": {{ .Values.transmission.config.downloadQueueSize | default 5 }},
      "encryption": {{ .Values.transmission.config.encryption | default 1 }},
      "idle-seeding-limit": {{ .Values.transmission.config.idleSeedingLimit | default 30 }},
      "idle-seeding-limit-enabled": {{ .Values.transmission.config.idleSeedingLimitEnabled | default false }},
      "incomplete-dir": "/downloads/incomplete",
      "incomplete-dir-enabled": {{ .Values.transmission.config.incompleteDirEnabled | default true }},
      "lpd-enabled": {{ .Values.transmission.config.lpdEnabled | default false }},
      "message-level": {{ .Values.transmission.config.messageLevel | default 2 }},
      "peer-congestion-algorithm": "",
      "peer-id-ttl-hours": {{ .Values.transmission.config.peerIdTtlHours | default 6 }},
      "peer-limit-global": {{ .Values.transmission.config.peerLimitGlobal | default 300 }},
      "peer-limit-per-torrent": {{ .Values.transmission.config.peerLimitPerTorrent | default 50 }},
      "peer-port": {{ .Values.transmission.service.peerPort | default 51413 }},
      "peer-port-random-high": {{ .Values.transmission.service.peerPort | default 51413 }},
      "peer-port-random-low": {{ .Values.transmission.service.peerPort | default 51413 }},
      "peer-port-random-on-start": false,
      "peer-socket-tos": "le",
      "pex-enabled": {{ .Values.transmission.config.pexEnabled | default false }},
      "port-forwarding-enabled": {{ .Values.transmission.config.portForwardingEnabled | default true }},
      "preallocation": {{ .Values.transmission.config.preallocation | default 1 }},
      "prefetch-enabled": {{ .Values.transmission.config.prefetchEnabled | default true }},
      "queue-stalled-enabled": {{ .Values.transmission.config.queueStalledEnabled | default true }},
      "queue-stalled-minutes": {{ .Values.transmission.config.queueStalledMinutes | default 30 }},
      "ratio-limit": {{ .Values.transmission.config.ratioLimit | default 2 }},
      "ratio-limit-enabled": {{ .Values.transmission.config.ratioLimitEnabled | default false }},
      "rename-partial-files": {{ .Values.transmission.config.renamePartialFiles | default true }},
      "rpc-authentication-required": {{ .Values.transmission.rpcPassword.enabled | default false }},
      "rpc-bind-address": "0.0.0.0",
      "rpc-enabled": true,
      "rpc-host-whitelist": "",
      "rpc-host-whitelist-enabled": false,
      {{- if .Values.transmission.rpcPassword.enabled }}
      "rpc-password": "{{ .Values.transmission.rpcPassword.value }}",
      {{- else }}
      "rpc-password": "",
      {{- end }}
      "rpc-port": {{ .Values.transmission.service.port }},
      "rpc-socket-mode": "0750",
      "rpc-url": "/transmission/",
      "rpc-username": "{{ .Values.transmission.rpcUsername | default "" }}",
      "rpc-whitelist": "",
      "rpc-whitelist-enabled": false,
      "scrape-paused-torrents-enabled": {{ .Values.transmission.config.scrapePausedTorrentsEnabled | default true }},
      "script-torrent-added-enabled": false,
      "script-torrent-added-filename": "",
      "script-torrent-done-enabled": false,
      "script-torrent-done-filename": "",
      "script-torrent-done-seeding-enabled": false,
      "script-torrent-done-seeding-filename": "",
      "seed-queue-enabled": {{ .Values.transmission.config.seedQueueEnabled | default false }},
      "seed-queue-size": {{ .Values.transmission.config.seedQueueSize | default 10 }},
      "speed-limit-down": {{ .Values.transmission.config.speedLimitDown | default 10024 }},
      "speed-limit-down-enabled": {{ .Values.transmission.config.speedLimitDownEnabled | default true }},
      "speed-limit-up": {{ .Values.transmission.config.speedLimitUp | default 5012 }},
      "speed-limit-up-enabled": {{ .Values.transmission.config.speedLimitUpEnabled | default true }},
      "start-added-torrents": {{ .Values.transmission.config.startAddedTorrents | default true }},
      "tcp-enabled": {{ .Values.transmission.config.tcpEnabled | default true }},
      "torrent-added-verify-mode": "{{ .Values.transmission.config.torrentAddedVerifyMode | default "fast" }}",
      "trash-original-torrent-files": {{ .Values.transmission.config.trashOriginalTorrentFiles | default false }},
      "umask": "{{ .Values.global.umask | default "002" }}",
      "upload-slots-per-torrent": {{ .Values.transmission.config.uploadSlotsPerTorrent | default 14 }},
      "utp-enabled": {{ .Values.transmission.config.utpEnabled | default false }},
      "watch-dir": "/watch",
      "watch-dir-enabled": {{ .Values.transmission.config.watchDirEnabled | default true }}
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transmission
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: transmission
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: transmission
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: transmission
      {{- if .Values.transmission.vpn.enabled }}
      annotations:
        # Force pod restart when VPN config changes
        checksum/vpn-config: {{ .Values.transmission.vpn | toYaml | sha256sum }}
        checksum/app-config: {{ .Values.transmission.config | toYaml | sha256sum }}
      {{- end }}
    spec:
      {{- if .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - {{ .Values.nodeAffinity.hostname }}
      {{- end }}
      containers:
        {{- if .Values.transmission.vpn.enabled }}
        # Gluetun VPN sidecar container
        - name: gluetun
          image: ghcr.io/qdm12/gluetun:latest
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          ports:
            - name: http
              containerPort: {{ .Values.transmission.service.port }}
              protocol: TCP
            - name: peer
              containerPort: {{ .Values.transmission.service.peerPort }}
              protocol: TCP
            - name: peer-udp
              containerPort: {{ .Values.transmission.service.peerPort }}
              protocol: UDP
            - name: control
              containerPort: 8000
              protocol: TCP
            - name: proxy-http
              containerPort: 8888
              protocol: TCP
            - name: proxy-socks
              containerPort: 8388
              protocol: TCP
          env:
            - name: VPN_SERVICE_PROVIDER
              value: {{ .Values.transmission.vpn.provider | quote }}
            - name: VPN_TYPE
              value: "wireguard"
            {{- if .Values.transmission.vpn.wireguard.addresses }}
            - name: WIREGUARD_ADDRESSES
              value: {{ .Values.transmission.vpn.wireguard.addresses | quote }}
            {{- end }}
            - name: WIREGUARD_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: transmission-vpn-secret
                  key: WIREGUARD_PRIVATE_KEY
            {{- if .Values.transmission.vpn.wireguard.presharedKey }}
            - name: WIREGUARD_PRESHARED_KEY
              valueFrom:
                secretKeyRef:
                  name: transmission-vpn-secret
                  key: WIREGUARD_PRESHARED_KEY
            {{- end }}
            {{- if .Values.transmission.vpn.wireguard.publicKey }}
            - name: WIREGUARD_PUBLIC_KEY
              value: {{ .Values.transmission.vpn.wireguard.publicKey | quote }}
            {{- end }}
            {{- if and .Values.transmission.vpn.wireguard.endpoint .Values.transmission.vpn.wireguard.endpoint.ip }}
            - name: WIREGUARD_ENDPOINT_IP
              value: {{ .Values.transmission.vpn.wireguard.endpoint.ip | quote }}
            - name: WIREGUARD_ENDPOINT_PORT
              value: {{ .Values.transmission.vpn.wireguard.endpoint.port | quote }}
            {{- end }}
            {{- if .Values.transmission.vpn.serverCities }}
            - name: SERVER_CITIES
              value: {{ .Values.transmission.vpn.serverCities | quote }}
            {{- end }}
            {{- if .Values.transmission.vpn.serverCountries }}
            - name: SERVER_COUNTRIES
              value: {{ .Values.transmission.vpn.serverCountries | quote }}
            {{- end }}
            - name: FIREWALL_DEBUG
              value: "on"
            - name: FIREWALL_INPUT_PORTS
              value: "1000,8000,{{ .Values.transmission.service.port }}"
            - name: FIREWALL_OUTBOUND_SUBNETS
              value: {{ .Values.transmission.vpn.allowedSubnets | default "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" | quote }}
            - name: FIREWALL_VPN_INPUT_PORTS
              value: {{ .Values.transmission.service.peerPort | quote }}
            # Force IPv6 disable to avoid routing issues
            - name: DISABLE_IPV6
              value: "yes"
            # VPN Port Forwarding (enable if your provider supports it)
            - name: VPN_PORT_FORWARDING
              value: {{ .Values.transmission.vpn.portForwarding.enabled | ternary "on" "off" | quote }}
            - name: HEALTH_VPN_DURATION_INITIAL
              value: "30s"
            - name: HTTP_CONTROL_SERVER_ADDRESS
              value: ":8000"
            - name: DOT
              value: "off"
            - name: BLOCK_MALICIOUS
              value: "off"
            - name: BLOCK_SURVEILLANCE
              value: "off"
            # Use Mullvad DNS for reliable resolution through VPN
            - name: DNS_ADDRESS
              value: "10.64.0.1"
            # Enable HTTP proxy for Transmission to use
            - name: HTTPPROXY
              value: "on"
            - name: HTTPPROXY_LISTENING_ADDRESS
              value: ":8888"
            # Enable Shadowsocks proxy as backup
            - name: SHADOWSOCKS
              value: "on"
            - name: SHADOWSOCKS_LISTENING_ADDRESS
              value: ":8388"
            # Log level for troubleshooting
            - name: LOG_LEVEL
              value: "debug"
          volumeMounts:
            - name: gluetun-data
              mountPath: /gluetun
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        {{- if .Values.transmission.vpn.portForwarding.enabled }}
        # Auto-update peer port sidecar
        - name: update-peer-port
          image: alpine:latest
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command:
            - '/bin/sh'
            - '-c'
            - |
              # Add dependencies
              echo "nameserver 8.8.8.8" > /etc/resolv.conf # allow quick resolution
              apk update
              apk add --no-cache jq curl

              # Transmission RPC URL
              TRANSMISSION_URL="http://localhost:{{ .Values.transmission.service.port }}/transmission/rpc/"
              # Gluetun Control Server URL
              GLUETUN_URL="http://localhost:8000/v1"
              # Initial Transmission RPC request with an invalid session ID to start
              SESSION_ID=""
              # How quickly to retry after a failure 
              ERROR_RETRY_S={{ .Values.transmission.vpn.portForwarding.errorRetrySeconds | default 60 }}
              # How often to check for updated ports
              UPDATE_CHECK_S={{ .Values.transmission.vpn.portForwarding.updateCheckSeconds | default 120 }}

              log() {
                echo "[$(date)] $1"
              }

              err() {
                echo "[$(date)] [ERROR] $1" 1>&2
              }

              while true; do
                log "Fetching Transmission Session ID"
                SESSION_ID=$(curl -s -X POST "$TRANSMISSION_URL" \
                  {{- if .Values.transmission.rpcPassword.enabled }}
                  -u ":{{ .Values.transmission.rpcPassword.value }}" \
                  {{- end }}
                  -H "Content-Type: application/json" \
                  -d "{\"arguments\":{},\"method\":\"session-get\"}" \
                  | sed -n 's/.*X-Transmission-Session-Id: \([^<]*\).*/\1/p')

                if [ -z "$SESSION_ID" ]; then
                  err "Session ID not found. Trying again in ${ERROR_RETRY_S}s"
                  sleep $ERROR_RETRY_S
                  continue
                fi

                log "Transmission Session ID: $SESSION_ID"

                while true; do
                  log 'Fetching port from Gluetun'

                  PORT=$(curl -s "${GLUETUN_URL}/openvpn/portforwarded" | jq -r '.port')

                  if [ -z "$PORT" ] || [ "$PORT" = "null" ]; then
                    err "Port forward not found. Trying again in ${ERROR_RETRY_S}s"
                    sleep $ERROR_RETRY_S
                    continue
                  fi

                  log "Gluetun forwarding Port: ${PORT}"
                  log "Sending request to Transmission RPC..."

                  RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X POST "$TRANSMISSION_URL" \
                     {{- if .Values.transmission.rpcPassword.enabled }}
                     -u ":{{ .Values.transmission.rpcPassword.value }}" \
                     {{- end }}
                     -H "Content-Type: application/json" \
                     -H "X-Transmission-Session-Id: $SESSION_ID" \
                     -d "{\"arguments\":{\"peer-port\":$PORT},\"method\":\"session-set\"}")

                  if [ "$RESPONSE" = "200" ]; then
                    log "Transmission RPC request successful. Peer port updated to $PORT."
                  elif [ "$RESPONSE" = "409" ]; then
                    err 'Received 409 Conflict. Fetching new Transmission session ID...'
                    break
                  else
                    err "Unexpected response: $RESPONSE from Transmission. Trying again in ${ERROR_RETRY_S}s"
                    sleep $ERROR_RETRY_S
                    continue
                  fi

                  log "Updating again in ${UPDATE_CHECK_S}s"
                  sleep $UPDATE_CHECK_S
                done
              done
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
        {{- end }}
        {{- end }}
        # Transmission main container
        - name: transmission
          image: "{{ .Values.transmission.image.repository }}:{{ .Values.transmission.image.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          {{- if not .Values.transmission.vpn.enabled }}
          ports:
            - name: http
              containerPort: {{ .Values.transmission.service.port }}
              protocol: TCP
            - name: peer
              containerPort: {{ .Values.transmission.service.peerPort }}
              protocol: TCP
            - name: peer-udp
              containerPort: {{ .Values.transmission.service.peerPort }}
              protocol: UDP
          {{- end }}
          env:
            {{- include "mediastack.commonEnv" . | nindent 12 }}
            {{- if .Values.transmission.vpn.enabled }}
            # Use VPN network interface when sharing network with VPN sidecar
            - name: TRANSMISSION_BIND_ADDRESS_IPV4
              value: "0.0.0.0"
            {{- end }}
            {{- with .Values.transmission.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads
            - name: watch
              mountPath: /watch
            - name: transmission-config
              mountPath: /config/settings.json
              subPath: settings.json
          {{- with .Values.transmission.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: transmission-config-pvc
        - name: downloads
          persistentVolumeClaim:
            claimName: downloads-pvc
        - name: watch
          persistentVolumeClaim:
            claimName: downloads-pvc
        - name: transmission-config
          configMap:
            name: transmission-config
        {{- if .Values.transmission.vpn.enabled }}
        - name: gluetun-data
          emptyDir: {}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: transmission
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.transmission.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.transmission.service.peerPort }}
      targetPort: peer
      protocol: TCP
      name: peer
    - port: {{ .Values.transmission.service.peerPort }}
      targetPort: peer-udp
      protocol: UDP
      name: peer-udp
  selector:
    app.kubernetes.io/name: transmission
    app.kubernetes.io/instance: {{ .Release.Name }}
---
{{- if .Values.transmission.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: transmission
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mediastack.labels" . | nindent 4 }}
    app.kubernetes.io/component: transmission
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: {{ .Values.global.traefik.entrypoint }}
    {{- if .Values.global.traefik.tls.enabled }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
    {{- $middlewares := include "mediastack.traefikMiddlewares" (dict "global" .Values.global "service" .Values.transmission) }}
    {{- if $middlewares }}
    traefik.ingress.kubernetes.io/router.middlewares: {{ $middlewares }}
    {{- end }}
spec:
  ingressClassName: traefik
  {{- if .Values.global.traefik.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.transmission.ingress.host }}.{{ .Values.global.domain }}
      secretName: transmission-tls
  {{- end }}
  rules:
    - host: {{ .Values.transmission.ingress.host }}.{{ .Values.global.domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: transmission
                port:
                  number: {{ .Values.transmission.service.port }}
{{- end }}
{{- end }}
